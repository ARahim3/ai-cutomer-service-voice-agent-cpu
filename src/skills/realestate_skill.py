from .base_skill import BaseSkill
import random # For mock API simulation
import os

class RealEstateSkill(BaseSkill):
    skill_id = "real_estate"

    def _make_mock_schedule_api_call(self, user_id, property_info, time_info):
        """Simulates calling the scheduling API."""
        print(f"MOCK API CALL: Scheduling for user {user_id}, property: '{property_info}', time: '{time_info}'")
        if not property_info or not time_info:
             return {"success": False, "error": "Missing property or time information"}
        if random.random() < 0.05: # 5% chance of failure
            return {"success": False, "error": "Simulated scheduling conflict"}
        else:
            mock_booking_id = f"mock_visit_{random.randint(1000, 9999)}"
            return {"success": True, "booking_id": mock_booking_id}

    def handle_intent(self, intent, entities, user_id, conversation_history):
        """Handles real estate intents using extracted entities."""
        last_user_message = conversation_history[-1]['content'] if conversation_history else ""

        if intent == "schedule_viewing":
            # Extract entities (LLM should provide these)
            prop_address = entities.get("property_address", entities.get("property_id", None))
            req_time = entities.get("requested_time", "ASAP") # Default if not extracted

            if not prop_address:
                return "I can help schedule a viewing. Which property are you interested in?"

            # --- Use Mock API Call ---
            mock_response = self._make_mock_schedule_api_call(user_id, prop_address, req_time)

            if mock_response["success"]:
                booking_id = mock_response["booking_id"]
                confirmation_message = f"Okay, your simulated viewing for {prop_address} at {req_time} is booked! (Ref: {booking_id})"
                print(f"MOCK API: Success - Booking {booking_id} made for {prop_address}.")
                # Update memory
                self.memory_handler.update_user_data(user_id, "last_viewing_booked", prop_address)
                self.memory_handler.update_user_data(user_id, "last_booking_id", booking_id)
            else:
                error_detail = mock_response["error"]
                confirmation_message = f"Sorry, there was a mock error scheduling the viewing: {error_detail}"
                print(f"MOCK API: Failure - {error_detail}")
            return confirmation_message
            # --- End Mock API ---

        elif intent in ["query_listings", "query_faq", "general_query"]:
            # Use the text response already generated by LLMHandler based on RAG
            last_assistant_message = next((msg['content'] for msg in reversed(conversation_history) if msg['role'] == 'assistant'), None)
            return last_assistant_message or self.get_generic_response(last_user_message, user_id, conversation_history) # Fallback

        else: # Unknown intent
            print(f"Warning: Skill received unhandled intent '{intent}'. Treating as general query.")
            last_assistant_message = next((msg['content'] for msg in reversed(conversation_history) if msg['role'] == 'assistant'), None)
            return last_assistant_message or "Sorry, I'm not sure how to handle that."